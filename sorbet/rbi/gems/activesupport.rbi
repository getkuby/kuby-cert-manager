# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activesupport/all/activesupport.rbi
#
# activesupport-7.0.2.3

class Object < BasicObject
  def blank?; end
  def presence; end
  def present?; end
end
class NilClass
  def blank?; end
end
class FalseClass
  def blank?; end
end
class TrueClass
  def blank?; end
end
class Array
  def blank?; end
  def compact_blank!; end
  def extract_options!; end
end
class Hash
  def blank?; end
  def compact_blank!; end
  def compact_blank; end
  def deep_merge!(other_hash, &block); end
  def deep_merge(other_hash, &block); end
  def except!(*keys); end
  def except(*keys); end
  def extract!(*keys); end
  def extractable_options?; end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def reverse_update(other_hash); end
  def slice!(*keys); end
  def with_defaults!(other_hash); end
  def with_defaults(other_hash); end
end
class String
  def blank?; end
  def camelcase(first_letter = nil); end
  def camelize(first_letter = nil); end
  def classify; end
  def constantize; end
  def dasherize; end
  def deconstantize; end
  def demodulize; end
  def foreign_key(separate_class_name_and_id_with_underscore = nil); end
  def humanize(capitalize: nil, keep_id_suffix: nil); end
  def indent!(amount, indent_string = nil, indent_empty_lines = nil); end
  def indent(amount, indent_string = nil, indent_empty_lines = nil); end
  def is_utf8?; end
  def mb_chars; end
  def parameterize(separator: nil, preserve_case: nil, locale: nil); end
  def pluralize(count = nil, locale = nil); end
  def remove!(*patterns); end
  def remove(*patterns); end
  def safe_constantize; end
  def singularize(locale = nil); end
  def squish!; end
  def squish; end
  def strip_heredoc; end
  def tableize; end
  def titlecase(keep_id_suffix: nil); end
  def titleize(keep_id_suffix: nil); end
  def truncate(truncate_at, options = nil); end
  def truncate_bytes(truncate_at, omission: nil); end
  def truncate_words(words_count, options = nil); end
  def underscore; end
  def upcase_first; end
end
class Numeric
  def blank?; end
end
class Time
  def blank?; end
end
class Module
  def cattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def cattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil, location: nil); end
  def cattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil, location: nil); end
  def delegate(*methods, to: nil, prefix: nil, allow_nil: nil, private: nil); end
  def delegate_missing_to(target, allow_nil: nil); end
  def mattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def mattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil, location: nil); end
  def mattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil, location: nil); end
  def module_parent; end
  def module_parent_name; end
  def module_parents; end
end
class Module::DelegationError < NoMethodError
end
module ActiveSupport
  def self.cache_format_version; end
  def self.cache_format_version=(value); end
  def self.eager_load!; end
  def self.error_reporter; end
  def self.error_reporter=(arg0); end
  def self.gem_version; end
  def self.test_order; end
  def self.test_order=(val); end
  def self.test_parallelization_threshold; end
  def self.test_parallelization_threshold=(val); end
  def self.to_time_preserves_timezone; end
  def self.to_time_preserves_timezone=(value); end
  def self.utc_to_local_returns_utc_offset_times; end
  def self.utc_to_local_returns_utc_offset_times=(value); end
  def self.version; end
  def test_order; end
  def test_order=(val); end
  def test_parallelization_threshold; end
  def test_parallelization_threshold=(val); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::LazyLoadHooks
end
module ActiveSupport::LazyLoadHooks
  def execute_hook(name, base, options, block); end
  def on_load(name, options = nil, &block); end
  def run_load_hooks(name, base = nil); end
  def self.extended(base); end
  def with_execution_control(name, block, once); end
end
module ActiveSupport::Inflector
  def apply_inflections(word, rules, locale = nil); end
  def camelize(term, uppercase_first_letter = nil); end
  def classify(table_name); end
  def const_regexp(camel_cased_word); end
  def constantize(camel_cased_word); end
  def dasherize(underscored_word); end
  def deconstantize(path); end
  def demodulize(path); end
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = nil); end
  def humanize(lower_case_and_underscored_word, capitalize: nil, keep_id_suffix: nil); end
  def inflections(locale = nil); end
  def ordinal(number); end
  def ordinalize(number); end
  def parameterize(string, separator: nil, preserve_case: nil, locale: nil); end
  def pluralize(word, locale = nil); end
  def safe_constantize(camel_cased_word); end
  def singularize(word, locale = nil); end
  def tableize(class_name); end
  def titleize(word, keep_id_suffix: nil); end
  def transliterate(string, replacement = nil, locale: nil); end
  def underscore(camel_cased_word); end
  def upcase_first(string); end
  extend ActiveSupport::Inflector
  extend ActiveSupport::Inflector
end
class ActiveSupport::Inflector::Inflections
  def acronym(word); end
  def acronyms; end
  def acronyms_camelize_regex; end
  def acronyms_underscore_regex; end
  def clear(scope = nil); end
  def define_acronym_regex_patterns; end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def initialize_dup(orig); end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def self.instance(locale = nil); end
  def self.instance_or_fallback(locale); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
end
class ActiveSupport::Inflector::Inflections::Uncountables < Array
  def <<(*word); end
  def add(words); end
  def delete(entry); end
  def initialize; end
  def to_regex(string); end
  def uncountable?(str); end
end
module ActiveSupport::Multibyte
  def self.proxy_class; end
  def self.proxy_class=(klass); end
end
class DateTime < Date
  def <=>(other); end
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def change(options); end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmtime; end
  def in(seconds); end
  def localtime(utc_offset = nil); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def noon; end
  def seconds_since_midnight; end
  def seconds_until_end_of_day; end
  def self.current; end
  def since(seconds); end
  def subsec; end
  def utc; end
  def utc?; end
  def utc_offset; end
end
module Kernel
  def enable_warnings(&block); end
  def self.enable_warnings(&block); end
  def self.silence_warnings(&block); end
  def self.suppress(*exception_classes); end
  def self.with_warnings(flag); end
  def silence_warnings(&block); end
  def suppress(*exception_classes); end
  def with_warnings(flag); end
end
module ActiveSupport::XmlMini_REXML
  def collapse(element, depth); end
  def empty_content?(element); end
  def get_attributes(element); end
  def merge!(hash, key, value); end
  def merge_element!(hash, element, depth); end
  def merge_texts!(hash, element); end
  def parse(data); end
  def require_rexml; end
  extend ActiveSupport::XmlMini_REXML
end
module ActiveSupport::XmlMini
  def _dasherize(key); end
  def _parse_binary(bin, entity); end
  def _parse_file(file, entity); end
  def backend; end
  def backend=(name); end
  def cast_backend_name_to_module(name); end
  def current_thread_backend; end
  def current_thread_backend=(name); end
  def depth; end
  def depth=(arg0); end
  def parse(**, &&); end
  def rename_key(key, options = nil); end
  def to_tag(key, value, options); end
  def with_backend(name); end
  extend ActiveSupport::XmlMini
end
module ActiveSupport::XmlMini::FileLike
  def content_type; end
  def content_type=(arg0); end
  def original_filename; end
  def original_filename=(arg0); end
end
module ActiveSupport::RubyFeatures
end
module ActiveSupport::DescendantsTracker
  def descendants; end
  def direct_descendants; end
  def inherited(base); end
  def self.accumulate_descendants(klass, acc); end
  def self.clear(classes); end
  def self.descendants(klass); end
  def self.direct_descendants(klass); end
  def self.disable_clear!; end
  def self.native?; end
  def self.store_inherited(klass, descendant); end
  def self.subclasses(klass); end
  def subclasses; end
end
class ActiveSupport::DescendantsTracker::DescendantsArray
  def <<(klass); end
  def cleanup!; end
  def each; end
  def initialize; end
  def initialize_copy(orig); end
  def refs_size; end
  def reject!; end
  include Enumerable
end
module ActiveSupport::Autoload
  def autoload(const_name, path = nil); end
  def autoload_at(path); end
  def autoload_under(path); end
  def autoloads; end
  def eager_autoload; end
  def eager_load!; end
  def self.extended(base); end
end
module ActiveSupport::VERSION
end
module ActiveSupport::Concern
  def append_features(base); end
  def class_methods(&class_methods_module_definition); end
  def included(base = nil, &block); end
  def prepend_features(base); end
  def prepended(base = nil, &block); end
  def self.extended(base); end
end
class ActiveSupport::Concern::MultipleIncludedBlocks < StandardError
  def initialize; end
end
class ActiveSupport::Concern::MultiplePrependBlocks < StandardError
  def initialize; end
end
module ActiveSupport::LoggerThreadSafeLevel
  def add(severity, message = nil, progname = nil, &block); end
  def debug?; end
  def error?; end
  def fatal?; end
  def info?; end
  def level; end
  def local_level; end
  def local_level=(level); end
  def log_at(level); end
  def unknown?; end
  def warn?; end
  extend ActiveSupport::Concern
end
module ActiveSupport::LoggerSilence
  def silence(severity = nil); end
  extend ActiveSupport::Concern
end
class ActiveSupport::Logger < Logger
  def initialize(*args, **kwargs); end
  def self.broadcast(logger); end
  def self.logger_outputs_to?(logger, *sources); end
  def self.silencer; end
  def self.silencer=(val); end
  def silencer; end
  def silencer=(val); end
  include ActiveSupport::LoggerSilence
  include ActiveSupport::LoggerThreadSafeLevel
end
class ActiveSupport::Logger::SimpleFormatter < Logger::Formatter
  def call(severity, timestamp, progname, msg); end
end
module DateAndTime
end
module DateAndTime::Compatibility
  def preserve_timezone; end
  def self.preserve_timezone; end
  def self.preserve_timezone=(val); end
  def self.utc_to_local_returns_utc_offset_times; end
  def self.utc_to_local_returns_utc_offset_times=(val); end
  def utc_to_local_returns_utc_offset_times; end
end
module Enumerable
  def _original_sum_with_required_identity(*arg0); end
  def compact_blank; end
  def exclude?(object); end
  def excluding(*elements); end
  def in_order_of(key, series); end
  def including(*elements); end
  def index_by; end
  def index_with(default = nil); end
  def many?; end
  def maximum(key); end
  def minimum(key); end
  def pick(*keys); end
  def pluck(*keys); end
  def sole; end
  def without(*elements); end
end
class Enumerable::SoleItemExpectedError < StandardError
end
class Range
  def sum(identity = nil); end
end
