# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `http-form_data` gem.
# Please instead update this file by running `bin/tapioca gem http-form_data`.

module HTTP
  extend ::HTTP::Chainable

  class << self
    def [](headers); end
  end
end

HTTP::CHARSET_RE = T.let(T.unsafe(nil), Regexp)

class HTTP::ContentType < ::Struct
  def charset; end
  def charset=(_); end
  def mime_type; end
  def mime_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
    def parse(str); end

    private

    def charset(str); end
    def mime_type(str); end
  end
end

module HTTP::FormData
  class << self
    def create(data, encoder: T.unsafe(nil)); end
    def ensure_hash(obj); end

    private

    def multipart?(data); end
  end
end

HTTP::FormData::CRLF = T.let(T.unsafe(nil), String)

class HTTP::FormData::CompositeIO
  def initialize(ios); end

  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end
  def rewind; end
  def size; end

  private

  def advance_io; end
  def current_io; end
  def read_chunks(length = T.unsafe(nil)); end
  def readpartial(max_length = T.unsafe(nil)); end
end

class HTTP::FormData::Error < ::StandardError; end

class HTTP::FormData::File < ::HTTP::FormData::Part
  def initialize(path_or_io, opts = T.unsafe(nil)); end

  def mime_type; end

  private

  def filename_for(io); end
  def make_io(path_or_io); end
end

HTTP::FormData::File::DEFAULT_MIME = T.let(T.unsafe(nil), String)

class HTTP::FormData::Multipart
  include ::HTTP::FormData::Readable

  def initialize(data, boundary: T.unsafe(nil)); end

  def boundary; end
  def content_length; end
  def content_type; end

  private

  def glue; end
  def tail; end

  class << self
    def generate_boundary; end
  end
end

class HTTP::FormData::Multipart::Param
  include ::HTTP::FormData::Readable

  def initialize(name, value); end

  private

  def content_type; end
  def filename; end
  def footer; end
  def header; end
  def parameters; end

  class << self
    def coerce(data); end
  end
end

class HTTP::FormData::Part
  include ::HTTP::FormData::Readable

  def initialize(body, content_type: T.unsafe(nil), filename: T.unsafe(nil)); end

  def content_type; end
  def filename; end
end

module HTTP::FormData::Readable
  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end
  def rewind; end
  def size; end
  def to_s; end
end

class HTTP::FormData::Urlencoded
  include ::HTTP::FormData::Readable

  def initialize(data, encoder: T.unsafe(nil)); end

  def content_length; end
  def content_type; end

  class << self
    def encoder; end
    def encoder=(implementation); end
  end
end

HTTP::FormData::VERSION = T.let(T.unsafe(nil), String)
HTTP::MIME_TYPE_RE = T.let(T.unsafe(nil), Regexp)
HTTP::VERSION = T.let(T.unsafe(nil), String)
