# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/kuby-core/all/kuby-core.rbi
#
# kuby-core-0.17.0

module Kuby
  def self.define(name, &block); end
  def self.definition; end
  def self.distros; end
  def self.env; end
  def self.env=(env_name); end
  def self.environment(name = nil); end
  def self.load!(config_file = nil); end
  def self.logger; end
  def self.logger=(arg0); end
  def self.packages; end
  def self.plugins; end
  def self.providers; end
  def self.register_distro(distro_name, distro_klass); end
  def self.register_package(package_name, package_def = nil); end
  def self.register_plugin(*args, **kwargs); end
  def self.register_provider(provider_name, provider_klass); end
end
class Kuby::Railtie < Rails::Railtie
end
class KubyGenerator < Rails::Generators::Base
  def create_config_file; end
  def create_dockerignore; end
  def create_initializer_file; end
end
module Kuby::Kubernetes
end
class Kuby::Kubernetes::MissingDeploymentError < StandardError
end
class Kuby::Kubernetes::MissingProviderError < StandardError
end
class Kuby::Kubernetes::MissingPluginError < StandardError
end
class Kuby::Kubernetes::MissingResourceError < StandardError
end
class Kuby::Kubernetes::DuplicateResourceError < StandardError
end
class Kuby::Kubernetes::Provider
  def after_configuration; end
  def after_deploy(manifest); end
  def after_initialize; end
  def after_setup; end
  def before_deploy(manifest); end
  def before_setup; end
  def configure(&block); end
  def deploy; end
  def deployer; end
  def environment; end
  def helm_cli; end
  def initialize(environment); end
  def kubeconfig_path; end
  def kubernetes_cli; end
  def rollback; end
  def setup; end
  def spec; end
end
class Kuby::Kubernetes::DockerDesktopProvider < Kuby::Kubernetes::Provider
  def after_initialize; end
  def config; end
  def configure(&block); end
  def kubeconfig_path; end
  def storage_class_name; end
end
class Kuby::Kubernetes::DockerDesktopProvider::Config
  def kubeconfig(*args); end
  extend KubeDSL::ValueFields
  extend KubeDSL::ValueFields::ClassMethods
  include KubeDSL::ValueFields::InstanceMethods
end
class Kuby::Kubernetes::BareMetalProvider < Kuby::Kubernetes::Provider
  def after_initialize(*args, &blk); end
  def config(*args, &blk); end
  def configure(*args, &blk); end
  def initialize(*args, &blk); end
  def kubeconfig_path(*args, &blk); end
  def storage_class_name(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class Kuby::Kubernetes::BareMetalProvider::Config
  def kubeconfig(*args); end
  def storage_class(*args); end
  extend KubeDSL::ValueFields
  extend KubeDSL::ValueFields
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::ValueFields::ClassMethods
  include KubeDSL::ValueFields::InstanceMethods
  include KubeDSL::ValueFields::InstanceMethods
end
class Kuby::UndefinedEnvironmentError < StandardError
end
class Kuby::MissingConfigError < StandardError
end
module Kuby::Plugins
end
class Kuby::Plugin
  def after_configuration; end
  def after_deploy(manifest); end
  def after_initialize; end
  def after_setup; end
  def before_deploy(manifest); end
  def before_setup; end
  def configure(&block); end
  def docker_images; end
  def environment; end
  def initialize(environment); end
  def resources; end
  def setup; end
end
module Kuby::Plugins::RailsApp
end
class Kuby::Plugins::RailsApp::Assets < Kuby::Plugin
  def asset_path(*args); end
  def asset_url(*args); end
  def configure(&block); end
  def configure_ingress(ingress, hostname); end
  def copy_task; end
  def deployment(&block); end
  def docker; end
  def docker_images; end
  def dockerfile; end
  def image; end
  def kubernetes; end
  def namespace; end
  def nginx_config(&block); end
  def packs_url(*args); end
  def resources; end
  def role; end
  def selector_app; end
  def service(&block); end
  def service_account(&block); end
  extend KubeDSL::ValueFields
  extend KubeDSL::ValueFields::ClassMethods
  include KubeDSL::ValueFields::InstanceMethods
end
class Kuby::PluginRegistry
  def each(&block); end
  def find(plugin_name, environment: nil); end
  def plugins; end
  def register(plugin_name, plugin_klass, environment: nil); end
  include Enumerable
end
class Kuby::Plugins::RailsApp::Plugin < Kuby::Plugin
  def after_configuration; end
  def app_secrets(&block); end
  def asset_path(*args); end
  def asset_url(*args); end
  def before_deploy(manifest); end
  def config_map(&block); end
  def configure(&block); end
  def database(&block); end
  def database_host; end
  def deployment(&block); end
  def docker; end
  def env(&block); end
  def hostname(*args); end
  def ingress(&block); end
  def initialize(environment); end
  def kubernetes; end
  def manage_database(*args); end
  def manage_database?(*args); end
  def master_key; end
  def namespace; end
  def packs_url(*args); end
  def replicas(*args); end
  def resources; end
  def role; end
  def root(*args); end
  def selector_app; end
  def service(&block); end
  def service_account(&block); end
  def tls_enabled(*args); end
  extend KubeDSL::ValueFields
  extend KubeDSL::ValueFields::ClassMethods
  include KubeDSL::ValueFields::InstanceMethods
end
class Kuby::Plugins::NginxIngress < Kuby::Plugin
  def after_initialize; end
  def already_deployed?; end
  def configure(&block); end
  def kubernetes_cli; end
  def namespace; end
  def service_name; end
  def setup; end
end
class Kuby::Plugins::NginxIngress::Config
  def provider(*args); end
  extend KubeDSL::ValueFields
  extend KubeDSL::ValueFields::ClassMethods
  include KubeDSL::ValueFields::InstanceMethods
end
module Kuby::Docker
end
class Kuby::Docker::BuildError < StandardError
end
class Kuby::Docker::PushError < StandardError
end
class Kuby::Docker::PullError < StandardError
end
class Kuby::Docker::LoginError < StandardError
end
class Kuby::Docker::MissingTagError < StandardError
end
class Kuby::Docker::UnsupportedDistroError < StandardError
end
class Kuby::Docker::MissingPackageError < StandardError
end
class Kuby::Docker::MissingDistroError < StandardError
end
class Kuby::Docker::Distro
  def default_packages(*args, &blk); end
  def initialize(*args, &blk); end
  def install(*args, &blk); end
  def shell_exe(*args, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Kuby::Docker::Debian < Kuby::Docker::Distro
  def default_packages(*args, &blk); end
  def install(*args, &blk); end
  def install_managed(*args, &blk); end
  def install_unmanaged(*args, &blk); end
  def phase(*args, &blk); end
  def shell_exe(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
end
class Kuby::Docker::Alpine < Kuby::Docker::Distro
  def default_packages(*args, &blk); end
  def install(*args, &blk); end
  def install_managed(*args, &blk); end
  def install_unmanaged(*args, &blk); end
  def phase(*args, &blk); end
  def shell_exe(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
end
module Kuby::Docker::Packages
end
class Kuby::Docker::Packages::Package
  def initialize(*args, &blk); end
  def managed?(*args, &blk); end
  def name(*args, &blk); end
  def version(*args, &blk); end
  def with_version(*args, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Kuby::Docker::Packages::Nodejs < Kuby::Docker::Packages::Package
  def install_from_image(*args, &blk); end
  def install_on_alpine(*args, &blk); end
  def install_on_debian(*args, &blk); end
  def version(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Kuby::Docker::Packages::Yarn < Kuby::Docker::Packages::Package
  def initialize(*args, &blk); end
  def install_on_alpine(*args, &blk); end
  def install_on_debian(*args, &blk); end
  def url(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Kuby::Docker::Packages::SimpleManagedPackage
  def initialize(arg0, &blk); end
  def managed?(*args, &blk); end
  def name(*args, &blk); end
  def package_name_for(*args, &blk); end
  def with_version(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Kuby::Docker::Packages::ManagedPackage
  def initialize(arg0, arg1, &blk); end
  def managed?(*args, &blk); end
  def name(*args, &blk); end
  def names_per_distro(*args, &blk); end
  def package_name_for(*args, &blk); end
  def with_version(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
