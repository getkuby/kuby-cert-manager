# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `docker-remote` gem.
# Please instead update this file by running `bin/tapioca gem docker-remote`.

module Docker; end
module Docker::Remote; end

class Docker::Remote::AuthInfo
  def initialize(auth_type, params, creds); end

  def auth_type; end
  def creds; end
  def params; end
  def strategy; end

  class << self
    def from_header(header, creds); end
  end
end

class Docker::Remote::BasicAuth
  def initialize(creds); end

  def creds; end
  def make_get(path); end
end

class Docker::Remote::BearerAuth
  include ::Docker::Remote::Utils

  def initialize(auth_info, creds); end

  def auth_info; end
  def creds; end
  def make_get(path); end

  private

  def realm; end
  def service; end
  def token; end
end

class Docker::Remote::Client
  include ::Docker::Remote::Utils

  def initialize(registry_url, repo, username = T.unsafe(nil), password = T.unsafe(nil)); end

  def catalog; end
  def creds; end
  def manifest_for(reference); end
  def registry_url; end
  def repo; end
  def tags; end

  private

  def auth; end
  def can_connect?(host, port); end
  def get(path, http: T.unsafe(nil), use_auth: T.unsafe(nil), limit: T.unsafe(nil)); end
  def make_http(uri); end
  def registry_http; end
  def registry_uri; end
  def www_auth(response); end
end

Docker::Remote::Client::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)
Docker::Remote::Client::PORTMAP = T.let(T.unsafe(nil), Hash)
Docker::Remote::Client::STANDARD_PORTS = T.let(T.unsafe(nil), Array)
class Docker::Remote::ClientError < ::StandardError; end

class Docker::Remote::Credentials
  def initialize(username, password); end

  def password; end
  def username; end
end

class Docker::Remote::DockerRemoteError < ::StandardError; end

class Docker::Remote::NoAuth
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  def make_get(path); end
end

class Docker::Remote::NotFoundError < ::Docker::Remote::ClientError; end
class Docker::Remote::ServerError < ::StandardError; end
class Docker::Remote::TooManyRetriesError < ::Docker::Remote::DockerRemoteError; end
class Docker::Remote::UnauthorizedError < ::Docker::Remote::ClientError; end
class Docker::Remote::UnexpectedResponseCodeError < ::Docker::Remote::DockerRemoteError; end
class Docker::Remote::UnknownRepoError < ::Docker::Remote::ClientError; end
class Docker::Remote::UnsupportedAuthTypeError < ::StandardError; end
class Docker::Remote::UnsupportedVersionError < ::Docker::Remote::DockerRemoteError; end

module Docker::Remote::Utils
  def potentially_raise_error!(response); end
end
