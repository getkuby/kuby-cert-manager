# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/railties/all/railties.rbi
#
# railties-7.0.2.3

module Rails
end
module Rails::Initializable
  def initializers; end
  def run_initializers(group = nil, *args); end
  def self.included(base); end
end
class Rails::Initializable::Initializer
  def after; end
  def before; end
  def belongs_to?(group); end
  def bind(context); end
  def block; end
  def context_class; end
  def initialize(name, context, options, &block); end
  def name; end
  def run(*args); end
end
class Rails::Initializable::Collection < Array
  def +(other); end
  def tsort_each_child(initializer, &block); end
  def tsort_each_node; end
  include TSort
end
module Rails::Initializable::ClassMethods
  def initializer(name, opts = nil, &blk); end
  def initializers; end
  def initializers_chain; end
  def initializers_for(binding); end
end
class Rails::Railtie
  def config; end
  def configure(&block); end
  def each_registered_block(type, &block); end
  def initialize; end
  def railtie_name(**, &&); end
  def railtie_namespace; end
  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_server_blocks(app); end
  def run_tasks_blocks(app); end
  def self.<=>(other); end
  def self.abstract_railtie?; end
  def self.config(**, &&); end
  def self.configure(&block); end
  def self.console(&blk); end
  def self.generate_railtie_name(string); end
  def self.generators(&blk); end
  def self.increment_load_index; end
  def self.inherited(subclass); end
  def self.instance; end
  def self.load_index; end
  def self.method_missing(name, *args, &block); end
  def self.new(*arg0); end
  def self.railtie_name(name = nil); end
  def self.rake_tasks(&blk); end
  def self.register_block_for(type, &blk); end
  def self.respond_to_missing?(name, _); end
  def self.runner(&blk); end
  def self.server(&blk); end
  def self.subclasses; end
  extend ActiveSupport::DescendantsTracker
  extend Rails::Initializable::ClassMethods
  include Rails::Initializable
end
module Rails::Command
  def self.command_type; end
  def self.commands; end
  def self.environment; end
  def self.file_lookup_paths; end
  def self.find_by_namespace(namespace, command_name = nil); end
  def self.hidden_commands; end
  def self.invoke(full_namespace, args = nil, **config); end
  def self.lookup_paths; end
  def self.print_commands; end
  def self.rails_new_with_no_path?(args); end
  def self.root; end
  extend ActiveSupport::Autoload
  extend Rails::Command::Behavior::ClassMethods
  include Rails::Command::Behavior
end
module Rails::Command::Behavior
  extend ActiveSupport::Concern
end
module Rails::Command::Behavior::ClassMethods
  def lookup!; end
  def lookup(namespaces); end
  def namespaces_to_paths(namespaces); end
  def no_color!; end
  def print_list(base, namespaces); end
  def subclasses; end
end
module Rails::Generators
  def namespace; end
  def namespace=(val); end
  def self.add_generated_file(file); end
  def self.after_generate_callbacks; end
  def self.aliases; end
  def self.api_only!; end
  def self.command_type; end
  def self.configure!(config); end
  def self.fallbacks; end
  def self.file_lookup_paths; end
  def self.find_by_namespace(name, base = nil, context = nil); end
  def self.help(command = nil); end
  def self.hidden_namespaces; end
  def self.hide_namespace(*namespaces); end
  def self.hide_namespaces(*namespaces); end
  def self.invoke(namespace, args = nil, config = nil); end
  def self.invoke_fallbacks_for(name, base); end
  def self.lookup_paths; end
  def self.namespace; end
  def self.namespace=(val); end
  def self.options; end
  def self.print_generators; end
  def self.print_list(base, namespaces); end
  def self.public_namespaces; end
  def self.run_after_generate_callback; end
  def self.sorted_groups; end
  def self.templates_path; end
  extend Rails::Command::Behavior::ClassMethods
  include Rails::Command::Behavior
end
module Rails::Generators::Actions
  def add_source(source, options = nil, &block); end
  def append_file_with_newline(path, str, options = nil); end
  def application(data = nil, options = nil); end
  def environment(data = nil, options = nil); end
  def execute_command(executor, command, options = nil); end
  def extify(name); end
  def gem(*args); end
  def gem_group(*names, &block); end
  def generate(what, *args); end
  def git(commands = nil); end
  def github(repo, options = nil, &block); end
  def indentation; end
  def initialize(*arg0); end
  def initializer(filename, data = nil); end
  def lib(filename, data = nil); end
  def log(*args); end
  def match_file(path, pattern); end
  def optimize_indentation(value, amount = nil); end
  def quote(value); end
  def rails_command(command, options = nil); end
  def rake(command, options = nil); end
  def rakefile(filename, data = nil); end
  def readme(path); end
  def rebase_indentation(value, amount = nil); end
  def route(routing_code, namespace: nil); end
  def route_namespace_pattern(namespace); end
  def vendor(filename, data = nil); end
  def with_indentation(&block); end
end
class Rails::Generators::Error < Thor::Error
end
class Rails::Generators::Base < Thor::Group
  def class_collisions(*class_names); end
  def extract_last_module(nesting); end
  def indent(content, multiplier = nil); end
  def module_namespacing(&block); end
  def namespace; end
  def namespace_dirs; end
  def namespaced?; end
  def namespaced_path; end
  def self.add_shebang_option!; end
  def self.banner; end
  def self.base_name; end
  def self.base_root; end
  def self.class_option(name, options = nil); end
  def self.default_aliases_for_option(name, options); end
  def self.default_for_option(config, name, options, default); end
  def self.default_generator_root; end
  def self.default_source_root; end
  def self.default_value_for_option(name, options); end
  def self.desc(description = nil); end
  def self.exit_on_failure?; end
  def self.generator_name; end
  def self.hide!; end
  def self.hook_for(*names, &block); end
  def self.hooks; end
  def self.inherited(base); end
  def self.namespace(name = nil); end
  def self.prepare_for_invocation(name, value); end
  def self.remove_hook_for(*names); end
  def self.source_root(path = nil); end
  def self.usage_path; end
  def wrap_with_namespace(content); end
  extend Thor::Actions::ClassMethods
  include Rails::Generators::Actions
  include Thor::Actions
end
